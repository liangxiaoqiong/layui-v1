<?php
/**
 * Created by PhpStorm.
 * User: hjun
 * Date: 2018/4/26
 * Time: 14:41
 */

namespace Common\PHPUnit\Model;

use Common\Model\BillModel;
use Common\Model\BuildingModel;
use Common\Model\ContractModel;
use Common\Model\FacilityModel;
use Common\Model\FloorModel;
use Common\Model\GardenModel;
use Common\Model\RoomModel;
use Common\Model\TradeDetailModel;

class TenancyMattersTest extends BaseModelTest
{
    /**
     * @var GardenModel
     */
    private $gardenModel;

    /**
     * @var BuildingModel
     */
    private $buildingModel;

    /**
     * @var FloorModel
     */
    private $floorModel;

    /**
     * @var RoomModel
     */
    private $roomModel;

    /**
     * @var ContractModel
     */
    private $contractModel;

    /**
     * @var BillModel
     */
    private $billModel;

    /**
     * @var TradeDetailModel
     */
    private $tradeModel;

    /**
     * @var FacilityModel
     */
    private $facilityModel;

    /**
     * @var array 定义需要实例化的模型
     */
    private $models = [];

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->models = [
            ['gardenModel', 'Garden', 'wjd_garden'],
            ['buildingModel', 'Building', 'wjd_building'],
            ['floorModel', 'Floor', 'wjd_floor'],
            ['roomModel', 'Room', 'wjd_room'],
            ['contractModel', 'Contract', 'wjd_contract'],
            ['billModel', 'Bill', 'wjd_bill'],
            ['tradeModel', 'TradeDetail', 'wjd_trade_detail'],
            ['facilityModel', 'Facility', 'wjd_facility'],
        ];
        foreach ($this->models as $value) {
            $this->setModel($value[0], $value[1]);
        }
    }

    public function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    public function setModel($selfName, $modelName)
    {
        $this->$selfName = D($modelName);
    }

    /**
     * 保证模型正确初始化
     * User: hjun
     * Date: 2018-05-10 18:09:41
     * Update: 2018-05-10 18:09:41
     * Version: 1.00
     */
    public function testModel()
    {
        foreach ($this->models as $value) {
            $this->assertEquals($value[2], $this->$value[0]->getTableName());
        }
    }

    /**
     * 测试添加楼宇的数据供给
     * @return array ['code'=>200, 'msg'=>'', 'data'=>null]
     * User: hjun
     * Date: 2018-05-11 02:47:48
     * Update: 2018-05-11 02:47:48
     * Version: 1.00
     */
    public function addBuildingProvider()
    {
        return [
            [
                'a',
                [
                    'building_name' => '测试楼宇1',
                    'province_id' => '350000',
                    'city_id' => '350200',
                    'area_id' => '350206',
                    'address' => '枋湖西路189号512',
                ]
            ],
            [
                'b',
                [
                    'building_name' => '测试楼宇1',
                    'province_id' => '350000',
                    'city_id' => '350200',
                    'area_id' => '350206',
                    'address' => '枋湖西路189号512',
                ]
            ],
            [
                'c',
                [
                    'building_name' => '测试楼宇2',
                    'province_id' => '350000',
                    'city_id' => '350200',
                    'area_id' => '350206',
                    'address' => '枋湖西路189号512',
                ]
            ],
            [
                'd',
                [
                    'building_name' => '同时加楼层',
                    'province_id' => '350000',
                    'city_id' => '350200',
                    'area_id' => '350206',
                    'address' => '枋湖西路189号512',
                    'floor_num' => 4,
                ]
            ],
            [
                'e',
                [
                    'building_name' => '同时加房间1',
                    'province_id' => '350000',
                    'city_id' => '350200',
                    'area_id' => '350206',
                    'address' => '不设置租金等内容',
                    'floor_num' => 5,
                    'room_num' => 6,
                ]
            ],
            [
                'f',
                [
                    'building_name' => '同时加房间2',
                    'province_id' => '350000',
                    'city_id' => '350200',
                    'area_id' => '350206',
                    'address' => '设置固定收租',
                    'floor_num' => 5,
                    'room_num' => 6,
                    'room_area' => 100,
                    'rent_type' => 1,
                    'rent_value' => 50
                ]
            ],
            [
                'g',
                [
                    'building_name' => '同时加房间3',
                    'province_id' => '350000',
                    'city_id' => '350200',
                    'area_id' => '350206',
                    'address' => '设置固定收租',
                    'floor_num' => 3,
                    'room_num' => 4,
                    'room_area' => 98,
                    'rent_type' => 0,
                    'rent_value' => 4563
                ]
            ],
            [
                'h',
                [
                    'building_name' => '同时加房间4',
                    'province_id' => '350000',
                    'city_id' => '350200',
                    'area_id' => '350206',
                    'address' => '设置固定收租',
                    'floor_num' => 3,
                    'room_num' => 4,
                    'room_area' => 95.34,
                    'rent_type' => 0,
                    'rent_value' => 4563.55
                ]
            ]
        ];
    }

    /**
     * 断言房间添加成功
     * @param $request
     * @param $buildingId
     * User: hjun
     * Date: 2018-05-11 11:24:39
     * Update: 2018-05-11 11:24:39
     * Version: 1.00
     */
    private function assertBuildingIsAddSuccess($request, $buildingId)
    {
        $building = $this->buildingModel->getBuilding(self::$gardenId, $buildingId);
        $this->assertEquals($request['building_name'], $building['building_name']);
        $this->assertEquals($request['address'], $building['address']);
    }

    /**
     * 断言添加后产生了相应数量的楼层
     * @param $request
     * @param $buildingId
     * User: hjun
     * Date: 2018-05-11 11:26:30
     * Update: 2018-05-11 11:26:30
     * Version: 1.00
     */
    private function assertBuildingHasRightFloorNumAfterAdd($request, $buildingId)
    {
        $where = [];
        $where['building_id'] = $buildingId;
        $where['is_delete'] = NOT_DELETED;
        $count = $this->floorModel->where($where)->count();
        $this->assertEquals($request['floor_num'], $count);
    }

    /**
     * 断言添加后产生了相应数量的房间
     * @param $request
     * @param $buildingId
     * User: hjun
     * Date: 2018-05-11 11:26:30
     * Update: 2018-05-11 11:26:30
     * Version: 1.00
     */
    private function assertBuildingHasRightRoomNumAfterAdd($request, $buildingId)
    {
        $where = [];
        $where['building_id'] = $buildingId;
        $where['is_delete'] = NOT_DELETED;
        $count = $this->roomModel->where($where)->count();
        $this->assertEquals($request['room_num'] * $request['floor_num'], $count);
    }

    /**
     * 断言房间的数据是正确的
     * @param $request
     * @param $list
     * User: hjun
     * Date: 2018-05-11 14:29:51
     * Update: 2018-05-11 14:29:51
     * Version: 1.00
     */
    private function assertRoomValueIsRight($request, $list)
    {
        foreach ($list as $room) {
            $reqArea = round($request['room_area'], 2);
            $roomArea = round($room['room_area'], 2);
            $reqValue = round($request['rent_value'], 2);
            $roomValue = round($room['rent_value'], 2);
            $reqType = round($request['rent_type'], 2);
            $roomType = round($room['rent_type'], 2);
            $roomRental = round($room['month_rental'], 2);
            $this->assertEquals($reqArea, $roomArea);
            $this->assertEquals($reqValue, $roomValue);
            $this->assertEquals($reqType, $roomType);
            if ($room['rent_type'] == RoomModel::RENT_TYPE_AREA_MONTH) {
                $monthRental = round($reqArea * $roomValue, 2);
                $this->assertEquals($monthRental, $roomRental);
            } else {
                $this->assertEquals($reqValue, $roomRental);
            }
        }
    }

    /**
     * 断言添加后产生了相应的房间数据
     * @param $request
     * @param $buildingId
     * User: hjun
     * Date: 2018-05-11 11:39:25
     * Update: 2018-05-11 11:39:25
     * Version: 1.00
     */
    private function assertBuildingHasRightRoomDataAfterAdd($request, $buildingId)
    {
        $where = [];
        $where['building_id'] = $buildingId;
        $where['is_delete'] = 0;
        $list = $this->roomModel->where($where)->select();
        if (!empty($list)) {
            $this->assertRoomValueIsRight($request, $list);
        }
    }

    /**
     * 测试添加楼宇
     * @dataProvider addBuildingProvider
     * @param $mark
     * @param $request
     * User: hjun
     * Date: 2018-05-10 18:15:45
     * Update: 2018-05-10 18:15:45
     * Version: 1.00
     */
    public function testAddBuilding($mark, $request)
    {
        $result = $this->buildingModel->addBuilding(self::$gardenId, $request);
        $buildingId = $result['data']['building_id'];
        if ($mark == 'a') {
            $this->assertBuildingIsAddSuccess($request, $buildingId);
        } elseif ($mark == 'b') {
            $this->assertEquals(BUILDING_NAME . '名称已存在', $result['msg']);
        } elseif ($mark == 'c') {
            $this->assertBuildingIsAddSuccess($request, $buildingId);
        } elseif ($mark == 'd') {
            $this->assertBuildingIsAddSuccess($request, $buildingId);
            $this->assertBuildingHasRightFloorNumAfterAdd($request, $buildingId);
        } elseif ($mark == 'e') {
            $this->assertBuildingIsAddSuccess($request, $buildingId);
            $this->assertBuildingHasRightFloorNumAfterAdd($request, $buildingId);
            $this->assertBuildingHasRightRoomNumAfterAdd($request, $buildingId);
        } elseif ($mark == 'f' || $mark == 'g' || $mark == 'h') {
            $this->assertBuildingIsAddSuccess($request, $buildingId);
            $this->assertBuildingHasRightFloorNumAfterAdd($request, $buildingId);
            $this->assertBuildingHasRightRoomNumAfterAdd($request, $buildingId);
            $this->assertBuildingHasRightRoomDataAfterAdd($request, $buildingId);
        }
    }

    /**
     * 添加楼层的数据供给
     * @return array ['code'=>200, 'msg'=>'', 'data'=>null]
     * User: hjun
     * Date: 2018-05-11 16:09:26
     * Update: 2018-05-11 16:09:26
     * Version: 1.00
     */
    public function addFloorProvider()
    {
        $buildingId = 0;
        return [
            [
                '普通添加',
                [
                    'building_id' => $buildingId,
                    'floor_num' => 1,
                    'public_coefficient' => 1,
                ]
            ],
            [
                '普通添加重复',
                [
                    'building_id' => $buildingId,
                    'floor_num' => 1,
                    'public_coefficient' => 2,
                ]
            ],
            [
                '普通添加包含房间',
                [
                    'building_id' => $buildingId,
                    'floor_num' => 2,
                    'public_coefficient' => 2,
                    'room_num' => 5
                ]
            ],
            [
                '普通添加包含房间、面积、租金',
                [
                    'building_id' => $buildingId,
                    'floor_num' => 3,
                    'public_coefficient' => 3,
                    'room_num' => 4,
                    'room_area' => 12.23,
                    'rent_type' => 0,
                    'rent_value' => 30.33
                ]
            ],
            [
                '普通添加包含房间、面积、租金',
                [
                    'building_id' => $buildingId,
                    'floor_num' => 4,
                    'public_coefficient' => 4,
                    'room_num' => 3,
                    'room_area' => 12.23,
                    'rent_type' => 1,
                    'rent_value' => 30.33
                ]
            ],
        ];
    }

    /**
     * 断言楼层添加成功
     * @param $request
     * @param $floorId
     * User: hjun
     * Date: 2018-05-11 14:23:47
     * Update: 2018-05-11 14:23:47
     * Version: 1.00
     */
    private function assertFloorIsAddSuccess($request, $floorId)
    {
        $floor = $this->floorModel->getFloor(self::$gardenId, $floorId);
        $this->assertEquals($request['floor_num'], $floor['floor_num']);
        $this->assertEquals($request['public_coefficient'], $floor['public_coefficient']);
    }

    /**
     * 断言添加楼层后有对应数量的房间
     * @param $request
     * @param $floorId
     * User: hjun
     * Date: 2018-05-11 14:25:13
     * Update: 2018-05-11 14:25:13
     * Version: 1.00
     */
    private function assertFloorHasRightRoomNumAfterAdd($request, $floorId)
    {
        $where = [];
        $where['floor_id'] = $floorId;
        $where['is_delete'] = NOT_DELETED;
        $count = $this->roomModel->where($where)->count();
        $this->assertEquals($request['room_num'], $count);
    }

    /**
     * 断言房间的数据是正确的 添加楼层之后
     * @param $request
     * @param $floorId
     * User: hjun
     * Date: 2018-05-11 14:31:55
     * Update: 2018-05-11 14:31:55
     * Version: 1.00
     */
    private function assertFloorHasRightRoomDataAfterAdd($request, $floorId)
    {
        $where = [];
        $where['floor_id'] = $floorId;
        $where['is_delete'] = NOT_DELETED;
        $list = $this->roomModel->where($where)->select();
        if (!empty($list)) {
            $this->assertRoomValueIsRight($request, $list);
        }
    }

    /**
     * @depends      testAddBuilding
     * @dataProvider addFloorProvider
     * @param $mark
     * @param $request
     * @return int
     * User: hjun
     * Date: 2018-05-11 14:14:38
     * Update: 2018-05-11 14:14:38
     * Version: 1.00
     */
    public function testAddFloor($mark, $request)
    {
        $request['building_id'] = $this->buildingModel->where(['is_delete' => NOT_DELETED])->getField('building_id');
        $result = $this->floorModel->addFloor(self::$gardenId, $request);
        $floorId = $result['data']['floor_id'];
        if ($mark == '普通添加') {
            $this->assertFloorIsAddSuccess($request, $floorId);
        } elseif ($mark == '普通添加重复') {
            $this->assertEquals('楼层名称已被命名,请换一个楼层名称', $result['msg']);
        } elseif ($mark == '普通添加包含房间') {
            $this->assertFloorIsAddSuccess($request, $floorId);
            $this->assertFloorHasRightRoomNumAfterAdd($request, $floorId);
        } elseif ($mark == '普通添加包含房间、面积、租金') {
            $this->assertFloorIsAddSuccess($request, $floorId);
            $this->assertFloorHasRightRoomNumAfterAdd($request, $floorId);
            $this->assertFloorHasRightRoomDataAfterAdd($request, $floorId);
        }
        return $floorId;
    }

    /**
     * 添加房间数据供给
     * @return array ['code'=>200, 'msg'=>'', 'data'=>null]
     * User: hjun
     * Date: 2018-05-11 16:30:29
     * Update: 2018-05-11 16:30:29
     * Version: 1.00
     */
    public function addRoomProvider()
    {
        return [
            [
                '普通添加',
                [
                    'room_name' => '1001',
                    'room_area' => 100,
                    'rent_type' => 0,
                    'rent_value' => 5000,
                    'room_desc' => '测试',
                    'remark' => '测试',
                    'room_status' => '1',
                ]
            ],
            [
                '重复添加',
                [
                    'room_name' => '1001',
                    'room_area' => 99.99,
                    'rent_type' => 1,
                    'rent_value' => 12.55,
                    'room_desc' => '测试',
                    'remark' => '测试',
                    'room_status' => '1',
                ]
            ],
            [
                '普通添加',
                [
                    'room_name' => '2001',
                    'room_area' => 99.99,
                    'rent_type' => 1,
                    'rent_value' => 12.55,
                    'room_desc' => '测试',
                    'remark' => '测试',
                    'room_status' => '0',
                ]
            ]
        ];
    }

    /**
     * 断言房间设备相同
     * @param $request
     * @param $roomId
     * User: hjun
     * Date: 2018-05-11 16:41:47
     * Update: 2018-05-11 16:41:47
     * Version: 1.00
     */
    private function assertFacilityNameIsRight($request, $roomId)
    {
        $room = $this->roomModel->getRoom(self::$gardenId, $roomId);
        $facilityIds = json_decode($room['room_facility'], 1);
        $facilityNames = json_decode($room['facility_name'], 1);
        $this->assertEquals(count($facilityIds), count($facilityNames));
        $result = isset($request['room_facility']) ? $request['room_facility'] : null;
        $this->assertEquals($result, $facilityIds);

    }

    /**
     * 断言房间添加成功
     * @param $request
     * @param $roomId
     * User: hjun
     * Date: 2018-05-11 16:37:20
     * Update: 2018-05-11 16:37:20
     * Version: 1.00
     */
    private function assertRoomIsAddSuccess($request, $roomId)
    {
        $room = $this->roomModel->getRoom(self::$gardenId, $roomId);
        $list = [$room];
        $this->assertRoomValueIsRight($request, $list);
        $this->assertFacilityNameIsRight($request, $roomId);
    }

    /**
     * @depends      testAddFloor
     * @dataProvider addRoomProvider
     * @param $mark
     * @param $request
     * 测试添加房间
     * User: hjun
     * Date: 2018-05-11 16:10:12
     * Update: 2018-05-11 16:10:12
     * Version: 1.00
     */
    public function testAddRoom($mark, $request)
    {
        $request['floor_id'] = $this->floorModel->where(['is_delete' => NOT_DELETED])->getField('floor_id');
        $facilitys = $this->facilityModel->getSelectList(self::$gardenId);
        foreach ($facilitys as $facility) {
            $request['room_facility'][] = $facility['facility_id'];
        }
        $result = $this->roomModel->addRoom(self::$gardenId, $request);
        $roomId = $result['data']['room_id'];
        if ($mark == '普通添加') {
            $this->assertRoomIsAddSuccess($request, $roomId);
        } elseif ($mark == '重复添加') {
            $this->assertEquals('房间名称已存在', $result['msg']);
        }
    }

    /**
     * 签约数据供给
     * @return array
     * User: hjun
     * Date: 2018-05-11 16:46:17
     * Update: 2018-05-11 16:46:17
     * Version: 1.00
     */
    public function signContractProvider()
    {
        return [
            [
                '分段合同1',
                [
                    'customer_name' => '黄俊',
                    'customer_mobile' => '15805946549',
                    'leader_name' => '游振丁',
                    'reminder_mobile' => '15805946549',
                    'remark' => '备注',
                    'deposit_num' => '1',
                    'deposit' => '5000',
                    'pay_type' => '1',
                    'collect_rental_type' => '1',
                    'fixed_pay_date' => '12',
                    'customer_id_type' => '0',
                    'advanced_days' => 0,
                    'pay_period' => '',
                    'room_facility' => [],
                    'segments_info' => [
                        [
                            'start_time' => '2018-01-01',
                            'end_time' => '2018-06-30',
                            'rent_value' => '5000'
                        ],
                        [
                            'start_time' => '2018-07-01',
                            'end_time' => '2018-12-31',
                            'rent_value' => '5200'
                        ]
                    ],
                    'charging_info' => [],
                ]
            ]
        ];
    }

    /**
     * 断言合同数据正确
     * @param $request
     * @param $contractId
     * User: hjun
     * Date: 2018-05-11 17:05:26
     * Update: 2018-05-11 17:05:26
     * Version: 1.00
     */
    private function assertContractDataIsRight($request, $contractId)
    {
        $contract = $this->contractModel->getContract(self::$gardenId, $contractId);
        $this->assertEquals($request['customer_name'], $contract['customer_name']);
        $this->assertEquals($request['customer_mobile'], $contract['customer_mobile']);
        $this->assertEquals($request['leader_name'], $contract['leader_name']);
        $this->assertEquals($request['reminder_mobile'], $contract['reminder_mobile']);
        $this->assertEquals($request['remark'], $contract['remark']);
        $this->assertEquals($request['deposit_num'], $contract['deposit_num']);
        $this->assertEquals(round($request['deposit'], 2), round($contract['deposit'], 2));
        $this->assertEquals($request['collect_rental_type'], $contract['collect_rental_type']);
        $this->assertEquals($request['fixed_pay_date'], $contract['fixed_pay_date']);
        $this->assertEquals(getPayTypePeriod($request['pay_type']), $contract['pay_period']);
        $this->assertEquals(strtotime($request['segments_info'][0]['start_time']), $contract['start_time']);
        $this->assertEquals(strtotime($request['segments_info'][count($request['segments_info']) - 1]['end_time']), $contract['end_time']);
    }

    /**
     * 断言合同账单的数量
     * @param $request
     * @param $contractId
     * User: hjun
     * Date: 2018-05-11 17:32:35
     * Update: 2018-05-11 17:32:35
     * Version: 1.00
     */
    private function assertContractBillsIsRight($request, $contractId)
    {
        $where = [];
        $where['contract_id'] = $contractId;
        $count = $this->billModel->where($where)->count();
        $this->assertEquals(4, $count);
    }

    /**
     * 测试签约合同
     * @depends       testAddRoom
     * @dataProvider  signContractProvider
     * @param $mark
     * @param $request
     * User: hjun
     * Date: 2018-05-11 16:10:34
     * Update: 2018-05-11 16:10:34
     * Version: 1.00
     */
    public function testSignContract($mark, $request)
    {
        $room = M('room')->where(['garden_id' => self::$gardenId, 'room_area' => ['gt', 0]])->find();
        $request['room_id'] = $room['room_id'];
        $request['qrcode_id'] = M('gathering_qrcode')->where(['garden_id' => self::$gardenId])->getField('qr_id');
        $request['tpl_id'] = M('contract_tpl')->where(['garden_id' => self::$gardenId])->getField('tpl_id');
        $result = $this->contractModel->sign(self::$gardenId, $request);
        $contractId = $result['data']['contract_id'];
        if ($mark == '分段合同1') {
            $this->assertContractDataIsRight($request, $contractId);
            $this->assertContractBillsIsRight($request, $contractId);
        }
    }

    /**
     * 断言收租后账单的数据正确性
     * @param $request
     * @param $billId
     * @param $admin
     * User: hjun
     * Date: 2018-05-13 14:59:38
     * Update: 2018-05-13 14:59:38
     * Version: 1.00
     */
    private function assertBillIsCollected($request, $billId, $admin)
    {
        $bill = $this->billModel->getBill(self::$gardenId, $billId);
        $this->assertEquals(BillModel::STATUS_PAYED, $bill['pay_status']);
        $this->assertEquals(strtotime($request['pay_time']), $bill['pay_time']);
        $this->assertEquals(($request['trade_no']), $bill['trade_no']);
        $this->assertEquals(($request['pay_type']), $bill['pay_type']);
        $this->assertEquals(($admin['id']), $bill['operator_id']);
        $this->assertEquals(($admin['username']), $bill['operator_name']);
    }

    /**
     * 断言收租后产生了流水
     * @param $billId
     * User: hjun
     * Date: 2018-05-13 15:00:14
     * Update: 2018-05-13 15:00:14
     * Version: 1.00
     */
    private function assertBillHasTradesAfterCollected($billId)
    {
        $bill = $this->billModel->getBill(self::$gardenId, $billId);
        $contract = $this->contractModel->getContract(self::$gardenId, $bill['contract_id']);
        $feeItems = json_decode($bill['fee_items'], 1);
        $num = 0;
        foreach ($feeItems as $fee) {
            if (!empty($fee['fee'])) {
                $num++;
            }
        }
        $where = [];
        $where['bill_id'] = $bill['bill_id'];
        $trades = $this->tradeModel->where($where)->select();
        $this->assertEquals($num, count($trades));
        $bill['object_name'] = $contract['customer_name'];
        $keys = [
            'bill_id', 'bill_type', 'object_name',
            'garden_id', 'garden_name', 'building_id', 'building_name',
            'floor_id', 'floor_name', 'room_id', 'room_name',
            'contract_id', 'start_time', 'end_time',
            'pay_type', 'trade_no', 'operator_id', 'operator_name',
            'pay_time' => 'create_time'
        ];
        foreach ($trades as $trade) {
            foreach ($keys as $srcField => $field) {
                $srcField = is_string($srcField) ? $srcField : $field;
                $this->assertEquals($bill[$srcField], $trade[$field]);
            }
        }
    }

    /**
     * 断言收租后房间的下期收租日更新了
     * @param $billId
     * User: hjun
     * Date: 2018-05-13 15:58:05
     * Update: 2018-05-13 15:58:05
     * Version: 1.00
     */
    private function assertRoomNextRentalTime($billId)
    {
        $bill = $this->billModel->getBill(self::$gardenId, $billId);
        $room = $this->roomModel->getRoom(self::$gardenId, $bill['room_id']);
        $time = $this->billModel->getNextRentalTimeByRoomId(self::$gardenId, $room['room_id']);
        $this->assertEquals($time, $room['next_rental_time']);
    }

    /**
     * 测试收租
     * @depends testSignContract
     * User: hjun
     * Date: 2018-05-13 14:39:30
     * Update: 2018-05-13 14:39:30
     * Version: 1.00
     */
    public function testCollectBill()
    {
        $where = [];
        $where['garden_id'] = self::$gardenId;
        $billId = $this->billModel->where($where)->getField('bill_id');
        $request = [
            'bill_id' => $billId,
            'pay_type' => BillModel::PAY_TYPE_WX,
            'trade_no' => '123421312412',
            'pay_time' => date('Y-m-d')
        ];
        $this->billModel->collectBill(self::$gardenId, $request, self::$admin);
        $this->assertBillIsCollected($request, $billId, self::$admin);
        $this->assertBillHasTradesAfterCollected($billId);
        $this->assertRoomNextRentalTime($billId);
    }

    /**
     * 断言添加账单成功
     * @param $request
     * @param $billId
     * User: hjun
     * Date: 2018-05-13 16:28:48
     * Update: 2018-05-13 16:28:48
     * Version: 1.00
     */
    private function assertAddBillSuccess($request, $billId)
    {
        $bill = $this->billModel->getBill(self::$gardenId, $billId);
        $contract = $this->contractModel->getContract(self::$gardenId, $bill['contract_id']);
        $feeItems = json_decode($bill['fee_items'], 1);
        $count = count($feeItems);
        $num = 0;
        foreach ($request['fee_items'] as $fee) {
            if (!empty($fee['fee'])) {
                $num++;
            }
        }
        $fields = [
            'garden_id', 'garden_name', 'building_id', 'building_name',
            'floor_id', 'floor_name', 'room_id', 'room_name', 'contract_id', 'contract_status',
        ];
        foreach ($fields as $field) {
            $this->assertEquals($contract[$field], $bill[$field]);
        }
        $this->assertEquals($request['contract_id'], $bill['contract_id']);
        $this->assertEquals(strtotime($request['start_time']), $bill['start_time']);
        $this->assertEquals(strtotime($request['end_time']), $bill['end_time']);
        $this->assertEquals(strtotime($request['ought_pay_time']), $bill['ought_pay_time']);
        $this->assertEquals($request['remark'], $bill['remark']);
        $this->assertEquals($num, $count);

    }

    /**
     * 断言账单改变后 房间的收起日更新
     * @param $billId
     * User: hjun
     * Date: 2018-05-13 19:36:57
     * Update: 2018-05-13 19:36:57
     * Version: 1.00
     */
    private function assertRoomHasRightRentalTimeAfterBill($billId)
    {
        $bill = $this->billModel->getBill(self::$gardenId, $billId);
        $contract = $this->contractModel->getContract(self::$gardenId, $bill['contract_id']);
        $room = $this->roomModel->getRoom(self::$gardenId, $contract['room_id']);
        $time = $this->billModel->getNextRentalTimeByRoomId(self::$gardenId, $bill['room_id']);
        $this->assertEquals($time, $room['next_rental_time']);
    }

    /**
     * 断言账单有相应数量的索引
     * @param $billId
     * User: hjun
     * Date: 2018-05-13 19:39:10
     * Update: 2018-05-13 19:39:10
     * Version: 1.00
     */
    private function assertChargingIndexHasRightNum($billId)
    {
        $bill = $this->billModel->getBill(self::$gardenId, $billId);
        $feeItems = json_decode($bill['fee_items'], 1);
        $count = count($feeItems);
        $where = [];
        $where['bill_id'] = $billId;
        $num = M('bill_charging_index')->where($where)->count();
        $this->assertEquals($num, $count);
    }

    /**
     * 添加账单数据供给
     * @return array ['code'=>200, 'msg'=>'', 'data'=>null]
     * User: hjun
     * Date: 2018-05-13 17:02:46
     * Update: 2018-05-13 17:02:46
     * Version: 1.00
     */
    public function addBillProvider()
    {
        return [
            [
                'error_time',
                [
                    'contract_id' => 0,
                    'start_time' => '201////',
                    'end_time' => '2018-01-31',
                    'ought_pay_time' => '2018-01-01',
                    'fee_items' => [
                        [
                            'item_id' => -2,
                            'item_name' => '押金',
                            'fee_type' => 1,
                            'fee' => 99.99,
                        ],
                        [
                            'item_id' => -1,
                            'item_name' => '租金',
                            'fee_type' => 0,
                            'fee' => 100.99,
                        ]
                    ],
                    'remark' => '测试添加',
                ]
            ],
            [
                'start_end',
                [
                    'contract_id' => 0,
                    'start_time' => '2018-02-01',
                    'end_time' => '2018-01-31',
                    'ought_pay_time' => '2018-01-01',
                    'fee_items' => [
                        [
                            'item_id' => -2,
                            'item_name' => '押金',
                            'fee_type' => 1,
                            'fee' => 99.99,
                        ],
                        [
                            'item_id' => -1,
                            'item_name' => '租金',
                            'fee_type' => 0,
                            'fee' => 100.99,
                        ]
                    ],
                    'remark' => '测试添加',
                ]
            ],
            [
                'empty_fee',
                [
                    'contract_id' => 0,
                    'start_time' => '2018-02-01',
                    'end_time' => '2018-03-31',
                    'ought_pay_time' => '2018-01-01',
                    'fee_items' => [
                        [
                            'item_id' => -2,
                            'item_name' => '押金',
                            'fee_type' => 0,
                            'fee' => 0,
                        ],
                        [
                            'item_id' => -1,
                            'item_name' => '租金',
                            'fee_type' => 1,
                            'fee' => 0,
                        ]
                    ],
                    'remark' => '测试添加',
                ]
            ],
            [
                'normal',
                [
                    'contract_id' => 0,
                    'start_time' => '2018-02-01',
                    'end_time' => '2018-03-31',
                    'ought_pay_time' => '2018-01-01',
                    'fee_items' => [
                        [
                            'item_id' => -2,
                            'item_name' => '押金',
                            'fee_type' => 0,
                            'fee' => 10.56,
                        ],
                        [
                            'item_id' => -1,
                            'item_name' => '租金',
                            'fee_type' => 1,
                            'fee' => 21.33,
                        ]
                    ],
                    'remark' => '测试添加',
                ]
            ]
        ];
    }

    /**
     * 测试添加账单
     * @depends      testSignContract
     * @dataProvider addBillProvider
     * User: hjun
     * Date: 2018-05-13 16:19:43
     * Update: 2018-05-13 16:19:43
     * Version: 1.00
     */
    public function testAddBill($mark, $request)
    {
        $contractId = $this->contractModel->where(['garden_id' => self::$gardenId])->getField('contract_id');
        $request['contract_id'] = $contractId;
        $result = $this->billModel->addBill(self::$gardenId, $request);
        if ($mark == 'error_time') {
            $this->assertEquals('请选择账单开始时间', $result['msg']);
        } elseif ($mark == 'start_end') {
            $this->assertEquals('开始时间不能大于结束时间', $result['msg']);
        } elseif ($mark == 'empty_fee') {
            $this->assertEquals('请选择账单的费用', $result['msg']);
        } else {
            $billId = $result['data']['bill_id'];
            $this->assertAddBillSuccess($request, $billId);
            $this->assertRoomHasRightRentalTimeAfterBill($billId);
            $this->assertChargingIndexHasRightNum($billId);
        }
    }
}